// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:mypassword@localhost:5432/postgres"
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  password         String
  name             String?
  isAdmin          Boolean           @default(false)
  roomParticipants RoomParticipant[]
  answerClaims     AnswerClaim[]
  playerRating     PlayerRating?
  createdAt        DateTime          @default(now())
  Room             Room[]
}

model Room {
  id               String            @id @default(uuid())
  name             String            @default("Untitled Room")
  hostId           Int
  host             User              @relation(fields: [hostId], references: [id])
  isActive         Boolean           @default(true)
  maxPlayers       Int               @default(10)
  password         String?
  createdAt        DateTime          @default(now())
  roomParticipants RoomParticipant[]
  answerClaims     AnswerClaim[]
}

model RoomParticipant {
  id       Int      @id @default(autoincrement())
  roomId   String
  room     Room     @relation(fields: [roomId], references: [id])
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  score    Int      @default(0)
  joinedAt DateTime @default(now())

  @@unique([roomId, userId])
}

model Question {
  id         Int      @id @default(autoincrement())
  text       String
  options    String[]
  correctIdx Int
}

model AnswerClaim {
  id            Int      @id @default(autoincrement())
  roomId        String
  room          Room     @relation(fields: [roomId], references: [id])
  questionIndex Int
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  txHash        String
  createdAt     DateTime @default(now())

  @@unique([roomId, questionIndex])
}

model PlayerRating {
  userId    Int      @id
  rating    Int      @default(1200)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
